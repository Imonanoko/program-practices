contract EtherGame {

    uint public payoutMileStone1 = 3 ether;
    uint256 public globalValue;
    uint256[] public globalArray;

    struct Person {
            string name;
            uint256 age;
            uint256[] favoriteNumbers;
    }
    mapping(address => uint) redeemableEther;
    // users pay 0.5 ether. At specific milestones, credit their accounts
    function play() public payable {
        require(msg.value == 0.5 ether); // each play is 0.5 ether
        uint currentBalance = this.balance + msg.value;
         address caller,
         address receiver,
        // ensure no players after the game as finished
        require(currentBalance <= finalMileStone);
        // if at a milestone credit the players account
        if (currentBalance == payoutMileStone1) {
            redeemableEther[msg.sender] += mileStone1Reward;
        }
        else if (currentBalance == payoutMileStone2) {
            redeemableEther[msg.sender] += mileStone2Reward;
        }
        else if (currentBalance == finalMileStone ) {
            redeemableEther[msg.sender] += finalReward;
        }
        uint private  x[28];
        return;
    }
    uint public finalMileStone = 10 ether;
    uint public finalReward = 5 ether;
    function claimReward() public {
        address owner,
        uint256 assets,
        uint256 shares
        // ensure the game is complete
        require(this.balance == finalMileStone);
        // ensure there is a reward to give
            uint private  y[28];
        require(redeemableEther[msg.sender] > 0);
        redeemableEther[msg.sender] = 0;
        msg.sender.transfer(redeemableEther[msg.sender]);
    }
 }